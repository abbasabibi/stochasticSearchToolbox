classdef FeatureRBFGridStatesPeriodic < Experiments.Features.FeatureConfigurator
    
    properties
        
    end
    
    methods
        function obj = FeatureRBFGridStatesPeriodic()
            obj = obj@Experiments.Features.FeatureConfigurator('RBFgrid');
        end
        
       
        function preConfigureTrial(obj, trial)
            obj.preConfigureTrial@Experiments.Features.FeatureConfigurator(trial);
            
            trial.setprop('maxNumberKernelSamples', 1000);
            stateFeatures1=...
                @(trial) FeatureGenerators.Kernel.PeriodicKernel( ...
                trial.dataManager, {{'states'}}, trial.dataManager.getPeriodicity('states'), trial.maxNumberKernelSamples,'PeriodicKernel',2*pi);
            stateFeatures2= ...
                @(trial) FeatureGenerators.Kernel.ExponentialQuadraticKernel( ...
                trial.dataManager, {{'states'}}, ~trial.dataManager.getPeriodicity('states'), trial.maxNumberKernelSamples);
            stateKernel= ...
                @(trial) FeatureGenerators.Kernel.ProductKernel( ...
                trial.dataManager, trial.maxNumberKernelSamples, {stateFeatures1(trial), stateFeatures2(trial) });
            
            nextStateFeatures1= ...
                @(trial) FeatureGenerators.Kernel.PeriodicKernel( ...
                trial.dataManager, {{'nextStates'}}, trial.dataManager.getPeriodicity('states'), trial.maxNumberKernelSamples,'PeriodicKernel',2*pi,'states');
          
            nextStateFeatures2= ...
                @(trial) FeatureGenerators.Kernel.ExponentialQuadraticKernel( ...
                trial.dataManager, {{'nextStates'}}, ~trial.dataManager.getPeriodicity('states'), trial.maxNumberKernelSamples, 'states');
            nextStateKernel= ...
                @(trial) FeatureGenerators.Kernel.ProductKernel( ...
                trial.dataManager, trial.maxNumberKernelSamples, ...
                {nextStateFeatures1(trial), nextStateFeatures2(trial) });  
            
            trial.setprop('maxNumberKernelSamples', 1000);
            trial.setprop('stateFeatures', ...
                @(trial) FeatureGenerators.RadialBasisFeatures(trial.dataManager, {{'states'}}, stateKernel(trial) ));
            trial.setprop('nextStateFeatures', ...
                @(trial) FeatureGenerators.RadialBasisFeatures(trial.dataManager, {{'nextStates'}}, nextStateKernel(trial) )); 
        end
        
    end    
end
