close all;

Common.clearClasses();
%clear all;
clc;

MySQL.mym('closeall');

category = 'test';
experimentName = 'numSamples';
numTrials = 1;
numIterations = 100;

configuredTask = Experiments.Tasks.DoubleLinkSwingUpFiniteHorizon();
configuredTask.addParameterSetter(@Experiments.ParameterSettings.PathIntegralRewardSettings);

%%
configuredLearner = Experiments.Learner.StepBasedComposedTimeDependentLearningSetup('PiREPS_NoFeatures');

evaluationCriterion = Experiments.EvaluationCriterion();


evaluate = Experiments.Evaluation(...
    {'settings.maxCorrActions',  'settings.Noise_std', 'settings.initSigmaActions', 'featureFunction'},{...
    1.0, 0.05, 1.0, []; ...
    },numIterations,numTrials);

numSamples = Experiments.Evaluation({'settings.numSamplesEpisodes', 'settings.maxSamples'}, {...
           2000 2000; 1200 1200; 800 800; 400 400; 200 200;...
            }, numIterations,numTrials);

lambda = Experiments.Evaluation(...
    {'settings.PathIntegralCostActionMultiplier'},{...
    1; 
    },numIterations,numTrials);

beta = Experiments.Evaluation(...
    {'settings.entropyBeta'},{...
    1.0; 
    },numIterations,numTrials);

% learner = Experiments.Evaluation(...
%     {'learner'},{...
%     @Learner.StepBasedRL.StepBasedRLPower; ...
%     },numIterations,numTrials);
learner = Experiments.Evaluation(...
    {'learner'},{...
    @Learner.StepBasedRL.StepBasedPIREPSLambda.CreateFromTrial; ...
    },numIterations,numTrials);
% learner = Experiments.Evaluation(...
%     {'learner'},{...
%     @Learner.StepBasedRL.StepBasedRLREPS; ...
%     },numIterations,numTrials);

evaluate = Experiments.Evaluation.getCartesianProductOf([evaluate, learner, lambda, beta, numSamples]);


experiment = Experiments.Experiment.createByName(experimentName, category, ...
    configuredTask, configuredLearner, evaluationCriterion, 5, ...
    {'engelberger',3, 'lagrange', 2, 'pontyagrin', 2, 'phytagoras', 1, 'hopper', 2});

experiment.addEvaluation(evaluate);
experiment.startLocal();
%experiment.startRemote();
