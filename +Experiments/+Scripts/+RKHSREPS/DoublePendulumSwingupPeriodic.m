%close all;

%Common.clearClasses();
%clear all;
%clc;

%MySQL.mym('closeall');
error('check whether the script works in the new toolbox!');
category = 'test';
experimentName = 'test';
numTrials = 10;
numIterations = 20;

configuredTask = Experiments.Tasks.DoubleSwingUpInfiniteHorizon();

%%
configuredLearner = Experiments.Learner.StepBasedRKHSREPSPeriodic('RKHSREPSPeriodic');

evaluationCriterion = Experiments.EvaluationCriterion();

evaluationCriterion.registerEvaluator(Evaluator.ReturnEvaluatorEvaluationSamples());
%evaluationCriterion.registerEvaluator(Evaluator.SaveDataAndTrial());

kernelsfor2linkrobot = Experiments.Evaluation(...
    {'stateFeatures1','stateFeatures2','stateFeatures','nextStateFeatures1', ...
    'nextStateFeatures2','nextStateFeatures','policyKernel1','policyKernel2', ...
    'policyKernel'}, ...
    {   ...       
        @(trial) FeatureGenerators.Kernel.PeriodicKernel( ...
        trial.dataManager, {'states'}, [1,3], trial.maxFeat,'PeriodicKernel',2*pi*ones(1,2)), ...
        @(trial) FeatureGenerators.Kernel.ExponentialQuadraticKernel( ...
        trial.dataManager, {'states'}, [2,4], trial.maxFeat), ...
        @(trial) FeatureGenerators.Kernel.ProductKernel( ...
        trial.dataManager, {'states'}, ':', trial.maxFeat, {'states'}, ...
        {trial.stateFeatures1, trial.stateFeatures2 }, {[1, 3],[2,4]}), ...
        @(trial) FeatureGenerators.Kernel.PeriodicKernel( ...
        trial.dataManager, {'nextStates'}, [1,3], trial.maxFeat,'PeriodicKernel',2*pi*ones(1,2)), ...
        @(trial) FeatureGenerators.Kernel.ExponentialQuadraticKernel( ...
        trial.dataManager, {'nextStates'}, [2,4], trial.maxFeat), ...
        @(trial) FeatureGenerators.Kernel.ProductKernel( ...
        trial.dataManager, {'nextStates'}, ':', trial.maxFeat, {'states'}, ...
        {trial.nextStateFeatures1, trial.nextStateFeatures2 }, {[1, 3],[2,4]}), ...
        @(trial) FeatureGenerators.Kernel.PeriodicKernel( ...
        trial.dataManager, {'states'}, [1,3], trial.maxFeat,'PolicyPeriodicKern',2*pi*ones(1,2)), ...
        @(trial) FeatureGenerators.Kernel.ExponentialQuadraticKernel( ...
        trial.dataManager, {'states'}, [2,4], trial.maxFeat,'PolicyGaussKern'), ...
        @(trial) FeatureGenerators.Kernel.ProductKernel( ...
        trial.dataManager, {'states'}, ':', trial.maxFeat, {'states'}, ...
        {trial.policyKernel1, trial.policyKernel2 }, {[1, 3],[2,4]},'PolicyKern') ...
    },numIterations,numTrials);

evaluate3_policyfrommodel = Experiments.Evaluation(...
    {'useStateFeaturesForPolicy',...
    'settings.RKHSparamsstate','settings.RKHSparamsactions'},{...
    false,...
    [1e-2 1 1.4 1.4 1 5 5  1  1  1], ... %negative values indicates features should be optimized
    [-1e-2 1  1    1   1  1    1    1 -4 -4], ... %negative values indicates features should be optimized
    %(dataManager, linearfunctionApproximator, varargin)
    },numIterations,numTrials);


evaluate3_policyfrommodel.setDefaultParameter('settings.GPInitializer', @Kernels.GPs.GaussianProcess.CreateSquaredExponentialPeriodicGP);
evaluate3_policyfrommodel.setDefaultParameter('settings.GPLearnerInitializer', @Kernels.Learner.GPHyperParameterLearnerLOOCVLikelihood.CreateWithStandardReferenceSet);
evaluate3_policyfrommodel.setDefaultParameter('settings.tolSF',0.0001);
evaluate3_policyfrommodel.setDefaultParameter('settings.epsilonAction' , 0.5);
evaluate3_policyfrommodel.setDefaultParameter('settings.numSamplesEvaluation' , 100);
evaluate3_policyfrommodel.setDefaultParameter('settings.GPVarianceNoiseFactorActions' ,1/sqrt(2) );
evaluate3_policyfrommodel.setDefaultParameter('settings.GPVarianceFunctionFactor' ,1/sqrt(2) );

%what is the difference between these two?
evaluate3_policyfrommodel.setDefaultParameter('settings.maxSizeReferenceSet' , 3000);
evaluate3_policyfrommodel.setDefaultParameter('maxNumberKernelSamples', 3000);


singlemodellearner = Experiments.Evaluation(...
    {'modelLearner'},...
    {...
        @(trial) Learner.ModelLearner.RKHSModelLearner_unc(trial.dataManager, ...
                ':', trial.stateFeatures,...
                trial.nextStateFeatures,trial.stateActionFeatures);...
    },numIterations,numTrials);

%'vanilla' version
evalute_RKHSREPS = Experiments.Evaluation.getCartesianProductOf([evaluate3_policyfrommodel, singlemodellearner,kernelsfor2linkrobot]);


 
experiment = Experiments.Experiment.createByName(experimentName, category, configuredTask, configuredLearner, evaluationCriterion, 5);


experiment.addEvaluation(evalute_RKHSREPS);


experiment.startLocal();
%experiment.startBatch();

