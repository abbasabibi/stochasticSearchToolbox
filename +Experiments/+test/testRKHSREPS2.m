Common.clearClasses();

%MySQL.mym('closeall');

category = 'test';
experimentName = 'test';
numTrials = 2;
numIterations = 20;

configuredTask = Experiments.Tasks.StepBasedLinear(true);

%%
configuredLearner = Experiments.Learner.StepBasedRKHSREPS('RKHSREPS');

evaluationCriterion = Experiments.EvaluationCriterion();

evaluate2 = Experiments.Evaluation(...
    {'actionPolicy','policyLearner', 'useStateFeaturesForPolicy'},{...
    @(dm,kernel) Distributions.Gaussian.GaussianActionPolicy(dm),...
    @Learner.SupervisedLearner.LinearGaussianCV, ...
    true,...
    %(dataManager, linearfunctionApproximator, varargin)
    },numIterations,numTrials);

evaluate3 = Experiments.Evaluation(...
    {'actionPolicy','policyLearner', 'useStateFeaturesForPolicy'},{...
    @(dm,kernel) Distributions.Gaussian.GaussianActionPolicy(dm),...
    @Learner.SupervisedLearner.LinearGaussianMLLearner, ...
    false,...
    %(dataManager, linearfunctionApproximator, varargin)
    },numIterations,numTrials);

%k = @(dm, mf) FeatureGenerators.Kernel.ExponentialQuadraticKernel(dm, 'states', ':', mf);
evaluate4 = Experiments.Evaluation(...
    {'actionPolicy','policyLearner', 'useStateFeaturesForPolicy'},{...
    @(dm, kernel) Distributions.NonParametric.GaussianProcessPolicy(dm, kernel),...
    @(dm, pol)Learner.SupervisedLearner.GaussianProcessPolicyLearner2(dm, pol,'sampleWeights', 'states', 'actions'),...
    false,...
    %@(dm, pol)Learner.SupervisedLearner.GaussianProcessPolicyLearner(dm,pol,'sampleWeights', 'states', 'actions'),...
    %(dataManager, linearfunctionApproximator, varargin)
    },numIterations,numTrials);

%@(dm, pol)Learner.SupervisedLearner.GaussianProcessPolicyLearner(dm, pol,'sampleWeights', 'states', 'actions'),...        
evaluate5 = Experiments.Evaluation(...
    {'actionPolicy', 'policyLearner', 'stateFeatures', 'nextStateFeatures','modelLearner'},...
    { ...
        @(dm, kernel) Distributions.NonParametric.GaussianProcessPolicy(dm, kernel),...
        @(dm, pol)Learner.SupervisedLearner.GaussianProcessPolicyLearner2(dm, pol,'sampleWeights', 'states', 'actions'),...  
        @(dm) FeatureGenerators.SquaredFeatures(dm, 'states', ':'),...
        @(dm) FeatureGenerators.SquaredFeatures(dm, 'nextStates',':'),...
        @Learner.ModelLearner.SampleModelLearner ...
    },numIterations,numTrials);



evaluate6 = Experiments.Evaluation(...
    {'actionPolicy','policyLearner'}, ...
    { @(dm,kernel) Experiments.test.testLQR(dm),...
      @(dm,pol) Learner.SupervisedLearner.DummySupervisedLearner(dm)}, numIterations, numTrials);

%  gauss + squared ft
evaluate7 = Experiments.Evaluation(...
    {'actionPolicy', 'policyLearner', 'stateFeatures', 'nextStateFeatures','modelLearner'},...
    { ...
        @(dm, kernel) Distributions.Gaussian.GaussianActionPolicy(dm),...
        @Learner.SupervisedLearner.LinearGaussianMLLearner,...  
         @(dm) FeatureGenerators.SquaredFeatures(dm, 'states', ':'),...
         @(dm) FeatureGenerators.SquaredFeatures(dm, 'nextStates',':'),...
         @Learner.ModelLearner.SampleModelLearner ...
    },numIterations,numTrials);



% Gauss + rkhs
evaluate8 = Experiments.Evaluation(...
    {'actionPolicy', 'policyLearner'},...
    { ...
        @(dm, kernel)  Distributions.Gaussian.GaussianActionPolicy(dm),...
        @Learner.SupervisedLearner.LinearGaussianMLLearner,...  
    },numIterations,numTrials);

%  gp + squared ft
evaluate9 = Experiments.Evaluation(...
    {'actionPolicy', 'policyLearner', 'stateFeatures', 'nextStateFeatures','modelLearner'},...
    { ...
        @(dm, kernel) Distributions.NonParametric.GaussianProcessPolicy(dm, kernel),...
        @(dm, pol)Learner.SupervisedLearner.GaussianProcessPolicyLearner2(dm, pol,'sampleWeights', 'states', 'actions'),...  
         @(dm) FeatureGenerators.SquaredFeatures(dm, 'states', ':'),...
         @(dm) FeatureGenerators.SquaredFeatures(dm, 'nextStates',':'),...
         @Learner.ModelLearner.SampleModelLearner ...
    },numIterations,numTrials);

% GP + rkhs
evaluate10 = Experiments.Evaluation(...
    {'actionPolicy', 'policyLearner'},...
    { ...
        @(dm, kernel) Distributions.NonParametric.GaussianProcessPolicy(dm, kernel),...
        @(dm, pol)Learner.SupervisedLearner.GaussianProcessPolicyLearner2(dm, pol,'sampleWeights', 'states', 'actions'),...  
    },numIterations,numTrials);

experiment = Experiments.Experiment.createByName(experimentName, category, configuredTask, configuredLearner, evaluationCriterion, 5);
% experiment.addEvaluation(evaluate1);
% experiment.addEvaluation(evaluate2);
% experiment.addEvaluation(evaluate3);
%experiment.addEvaluation(evaluate4);
%experiment.addEvaluation(evaluate5);
%experiment.addEvaluation(evaluate6); % remember to set initSigmaAction to
%                                       something low!
%experiment.addEvaluation(evaluate7);
experiment.addEvaluation(evaluate2);
%experiment.addEvaluation(evaluate3);
experiment.startLocal();

